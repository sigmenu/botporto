generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  password          String
  name              String
  company           String?
  phone             String?
  role              String              @default("CLIENT")
  plan              String              @default("TRIAL")
  isFirstLogin      Boolean             @default(true)
  onboardingStep    Int                 @default(0)
  emailVerified     Boolean             @default(false)
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relacionamentos simplificados
  restaurants       Restaurant[]
  botConfigs        BotConfig[]
  excludedContacts  ExcludedContact[]
  
  @@map("users")
}

model Restaurant {
  id                String      @id @default(cuid())
  userId            String
  name              String
  address           String?
  phone             String?
  businessHours     String?     // JSON string
  deliveryFee       Float?
  minOrderValue     Float?
  ifoodUrl          String?
  uberEatsUrl       String?
  reservationUrl    String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  user              User        @relation(fields: [userId], references: [id])
  menuItems         MenuItem[]
  promotions        Promotion[]
  
  @@map("restaurants")
}

model MenuItem {
  id                String      @id @default(cuid())
  restaurantId      String
  name              String
  description       String?
  price             Float
  category          String?
  preparationTime   Int?
  ingredients       String?     // JSON string
  allergens         String?     // JSON string
  isAvailable       Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  restaurant        Restaurant  @relation(fields: [restaurantId], references: [id])
  
  @@map("menu_items")
}

model Promotion {
  id                String      @id @default(cuid())
  restaurantId      String
  title             String
  description       String
  discountType      String      // PERCENTAGE, FIXED, BOGO
  discountValue     Float
  isActive          Boolean     @default(true)
  isRecurring       Boolean     @default(false)
  recurringDays     String?     // JSON string array
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  restaurant        Restaurant  @relation(fields: [restaurantId], references: [id])
  
  @@map("promotions")
}

model BotConfig {
  id                String      @id @default(cuid())
  userId            String      @unique
  personality       String      @default("friendly")
  responseLength    String      @default("medium")
  audioProcessing   Boolean     @default(false)
  imageProcessing   Boolean     @default(false)
  model             String      @default("gpt-4o-mini")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  user              User        @relation(fields: [userId], references: [id])
  aiTrainings       AITraining[]
  
  @@map("bot_configs")
}

model AITraining {
  id                String      @id @default(cuid())
  botConfigId       String
  userInput         String
  expectedResponse  String
  category          String?
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  
  botConfig         BotConfig   @relation(fields: [botConfigId], references: [id])
  
  @@map("ai_trainings")
}

model ExcludedContact {
  id                String      @id @default(cuid())
  userId            String
  phoneNumber       String
  reason            String?
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  
  user              User        @relation(fields: [userId], references: [id])
  
  @@map("excluded_contacts")
}