generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  password         String
  name             String
  company          String?
  phone            String?
  role             String             @default("CLIENT")
  plan             String             @default("TRIAL")
  isFirstLogin     Boolean            @default(true)
  onboardingStep   Int                @default(0)
  emailVerified    Boolean            @default(false)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  // Relacionamentos existentes
  restaurants      Restaurant[]
  botConfigs       BotConfig[]
  excludedContacts ExcludedContact[]

  // Novos relacionamentos
  whatsappSessions WhatsAppSession[]
  subscription     Subscription?
  apiKeys          ApiKey[]
  activityLogs     ActivityLog[]
  templates        Template[]
  // ... outros relacionamentos conforme necess√°rio
  
  @@map("users")
}

model Restaurant {
  id              String      @id @default(cuid())
  userId          String
  name            String
  description     String?
  address         String?
  phone           String?
  whatsappNumber  String?
  businessHours   String?
  deliveryFee     Float?
  minOrderValue   Float?
  deliveryUrl     String?
  ifoodUrl        String?
  uberEatsUrl     String?
  reservationUrl  String?
  deliveryTax     Float?
  minimumOrder    Float?
  acceptsDelivery Boolean     @default(true)
  acceptsPickup   Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user            User        @relation(fields: [userId], references: [id])
  menuItems       MenuItem[]
  promotions      Promotion[]
  
  @@map("restaurants")
}

model MenuItem {
  id              String      @id @default(cuid())
  restaurantId    String
  name            String
  description     String?
  price           Float
  category        String?
  preparationTime Int?
  ingredients     String?
  allergens       String?
  isAvailable     Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  
  @@map("menu_items")
}

model Promotion {
  id            String      @id @default(cuid())
  restaurantId  String
  title         String
  description   String
  discountType  String
  discountValue Float
  isActive      Boolean     @default(true)
  isRecurring   Boolean     @default(false)
  recurringDays String?
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
  
  @@map("promotions")
}

model BotConfig {
  id              String      @id @default(cuid())
  userId          String      @unique
  personality     String      @default("friendly")
  responseLength  String      @default("medium")
  audioProcessing Boolean     @default(false)
  imageProcessing Boolean     @default(false)
  model           String      @default("gpt-4o-mini")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user            User        @relation(fields: [userId], references: [id])
  aiTrainings     AITraining[]
  
  @@map("bot_configs")
}

model AITraining {
  id               String     @id @default(cuid())
  botConfigId      String
  userInput        String
  expectedResponse String
  category         String?
  isActive         Boolean    @default(true)
  createdAt        DateTime   @default(now())
  
  botConfig        BotConfig  @relation(fields: [botConfigId], references: [id])
  
  @@map("ai_trainings")
}

model ExcludedContact {
  id          String   @id @default(cuid())
  userId      String
  phoneNumber String
  reason      String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("excluded_contacts")
}

// =====================
// Novos modelos para WhatsApp/IA
// =====================

model WhatsAppSession {
  id             String    @id @default(cuid())
  userId         String
  templateId     String?
  name           String
  status         String    @default("DISCONNECTED")
  phoneNumber    String?
  qrCode         String?
  personality    Json?
  aiSettings     Json?
  businessHours  Json?
  language       String    @default("pt-BR")
  autoReply      Boolean   @default(true)
  humanHandover  Boolean   @default(false)
  lastConnected  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user           User      @relation(fields: [userId], references: [id])
  template       Template? @relation(fields: [templateId], references: [id])
  contacts       Contact[]
  messages       Message[]
  broadcasts     Broadcast[]
  scheduled      ScheduledMessage[]
}

model Contact {
  id            String   @id @default(cuid())
  sessionId     String
  phoneNumber   String
  name          String
  email         String?
  tags          Json?
  notes         String?
  customFields  Json?
  profilePicture String?
  lastMessageAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  session       WhatsAppSession @relation(fields: [sessionId], references: [id])
  messages      Message[]
  recipients    BroadcastRecipient[]

  @@unique([sessionId, phoneNumber], name: "sessionId_phoneNumber")
}

model Message {
  id               String   @id @default(cuid())
  messageId        String   @unique
  sessionId        String
  contactId        String
  type             String
  content          String?
  mediaUrl         String?
  mediaCaption     String?
  isFromMe         Boolean  @default(false)
  status           String   @default("SENT")
  timestamp        DateTime @default(now())
  metadata         Json?
  transcription    String?
  imageAnalysis    Json?
  documentAnalysis Json?
  aiProcessed      Boolean  @default(false)
  aiResponse       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  session          WhatsAppSession @relation(fields: [sessionId], references: [id])
  contact          Contact         @relation(fields: [contactId], references: [id])
}

model Broadcast {
  id             String   @id @default(cuid())
  sessionId      String
  name           String
  content        String
  mediaUrl       String?
  scheduledFor   DateTime?
  totalRecipients Int      @default(0)
  sentCount      Int      @default(0)
  failedCount    Int      @default(0)
  status         String   @default("PENDING")
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  session        WhatsAppSession  @relation(fields: [sessionId], references: [id])
  recipients     BroadcastRecipient[]
}

model BroadcastRecipient {
  id          String    @id @default(cuid())
  broadcastId String
  contactId   String
  status      String    @default("PENDING")
  error       String?
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  broadcast   Broadcast @relation(fields: [broadcastId], references: [id])
  contact     Contact   @relation(fields: [contactId], references: [id])
}

model ScheduledMessage {
  id            String   @id @default(cuid())
  sessionId     String
  recipientPhone String
  content       String
  mediaUrl      String?
  type          String   @default("TEXT")
  scheduledFor  DateTime
  executed      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  session       WhatsAppSession @relation(fields: [sessionId], references: [id])
}

model Template {
  id          String   @id @default(cuid())
  userId      String?
  name        String
  description String?
  category    String
  prompts     Json
  isPublic    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User?    @relation(fields: [userId], references: [id])
  sessions    WhatsAppSession[]
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  plan          String   @default("FREE")
  status        String   @default("ACTIVE")
  messagesLimit Int      @default(1000)
  contactsLimit Int      @default(1000)
  sessionsLimit Int      @default(1)
  messagesUsed  Int      @default(0)
  contactsUsed  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])
  usage         Usage[]
}

model Usage {
  id              String   @id @default(cuid())
  subscriptionId  String
  date            DateTime
  messagesCount   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  subscription    Subscription @relation(fields: [subscriptionId], references: [id])

  @@unique([subscriptionId, date], name: "subscriptionId_date")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions Json?
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  details   Json?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}